@startuml

class Explorer {
    +void initialize(String s)
    +String takeDecision()
    +void acknowledgeResults(String s)
    +String deliverFinalReport()
}

class Drone{
    +JSONObject scan()
    +JSONObject echoFwd()
    +JSONObject echoRight()
    +JSONObject echoLeft()
    +JSONObject flyFwd()
    +JSONObject flyRight()
    +JSONObject flyLeft()
    +JSONObject stop()
    +void update(Response r)
}

class Map{
    +void update(Response r, Direction dh)
    +POI findClosestCreek()
}

class MapTile{
    -Type tileType
    +Boolean sameTileType(MapTile t)
}

class MapCoordinate{
    +String toString()
    +void translateFwd(Direction dh)
    +void translateLeft(Direction dh)
    +void translateRight(Direction dh)
    +double calculateDistance (MapCoordinate c1, MapCoordinate c2)
}

class POI{}

enum Direction{
    +String toString()
    +Direction toDirection(String d)
    +Direction lookRight()
    +Direction lookLeft()
    +Boolean isNorth()
    +Boolean isSouth()
    +Boolean isEast()
    +Boolean isWest()
}

class InfoTranslator{
    +Response createResponse(JSONObject rInfo, Operation prevOp)
}

class MissionCoordinator{
    -SearchState currState;
    +JSONObject makeDecision()
    +void updateMap(Response r)
    +void updateDrone(Response r)
}

abstract class Response{}

class EchoResponse{}

class ScanResponse{
    +ArrayList<String> parseBiomes(JSONArray b)
    +ArrayList<String> parseCreeks(JSONArray c)
    +String parseSites(JSONArray s)
}

class MovementResponse{}

enum ResultType{
    +String toString()
}

Interface SearchState{
    +Operation handle()
    +Boolean isFinished()
    +SearchStateName getName()
}

enum SearchStateName{
    +String toString()
}

Interface SearchAlgo{
    +Operation search()
}

class FindIsland{
    +Operation handle()
    +void transitionLogic()
    +Boolean isFinished()
    +SearchStateName getName()
}

class IslandGridSearch{
    +Operation handle()
    +Operation search()
    +Boolean isFinished()
    +SearchStateName getName()
}

class ReturnHome{
    -MissionCoordinator missionCoordinator
    +Operation handle()
    +Boolean isFinished()
    +SearchStateName getName()
}

class BatteryManager{
    +public int calculateThreshold(MapCoordinate c)
    +public Boolean exceededThreshold(Integer b, MapCoordinate c)
}

class Operation{
    +boolean isEchoLeft()
    +boolean isEchoRight()
    +boolean isEchoFwd()
    +boolean isEcho()
    +boolean isFly()
    +boolean isScan()
    +boolean isFlyFwd()
    +boolean isFlyLeft()
    +boolean isFlyRight()
}

enum Action{
    +String toString()
    +Action oppositeAction()
}

class FinalReport{
    +String getReport()
}

Explorer --> "1" InfoTranslator
Explorer --> "1" MissionCoordinator
Explorer --> "1" FinalReport

MissionCoordinator --> "1" "Drone"
MissionCoordinator --> "1" "Map"
MissionCoordinator ..> "*" SearchState : <<creates>>
MissionCoordinator --> "1" BatteryManager

FindIsland ..|> SearchState
IslandGridSearch ..|> SearchState
IslandGridSearch ..|> SearchAlgo
ReturnHome ..|> SearchState
SearchState --> SearchStateName

Map *-- MapTile
Map *-- MapCoordinate
Map *-- POI
Map --> Direction

Drone --> Direction

Operation --> "1" Action

EchoResponse --|> Response
ScanResponse --|> Response
MovementResponse --|> Response
Response --> ResultType

InfoTranslator ..> Operation : <<uses>>
InfoTranslator ..> Response : <<creates>>

@enduml